bool dfs(int node,vector<int>adj[],vector<int>&visited,vector<int>&pathVis)
{
    visited[node] = 1;
    pathVis[node] = 1;
    for(auto child : adj[node])
    {
        if(!visited[child])
        {
            if(dfs(child,adj,visited,pathVis))//dfs(3)
            {
                return true;
            }
        }
        else if(pathVis[child])
        {
            return true;
        }
    }
    pathVis[node] = 0;
    return false;
}
public:
bool isCyclic(int V, vector<vector<int>> &edges)
{
    vector<int>adj[V];
    for(auto edge : edges)
    {
        int u = edge[0];
        int v = edge[1];
        adj[u].push_back(v);
    }
    vector<int>visited(V,0);
    vector<int>pathVis(V,0);
    for(int i = 0 ; i < V ; i++)
    {
        if(!visited[i])
        {
            if(dfs(i,adj,visited,pathVis))
            {
                return true;
            }
        }
    }
    return false;
}
