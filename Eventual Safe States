bool dfs(int node,vector<int>&visited,vector<int>&pathVis,vector<int>adj[],vector<int>&cycle)
{
    visited[node] = 1;
    pathVis[node] = 1;

    for(auto child : adj[node])
    {
        if(!visited[child])
        {
            if(dfs(child,visited,pathVis,adj,cycle))
            {
                cycle.push_back(node);
                return true;
            }
        }
        else if(pathVis[child])
        {
            cycle.push_back(child);
            return true;
        }
    }

    pathVis[node] = 0;
    return false;
}

vector<int> eventualSafeNodes(int V, vector<int> adj[])
{
    vector<int>vis(V,0);
    vector<int>pathVis(V,0);
    vector<int>cycle;
    vector<int>res;
    for(int i = 0 ; i < V ; i++)
    {
        if(!vis[i])
        {
            dfs(i,vis,pathVis,adj,cycle);
        }
    }

    for(int i = 0 ; i < V ; i++)
    {
        if(vis[i] == 1 && pathVis[i] == 0)
        {
            res.push_back(i);
        }
    }
    sort(res.begin(),res.end());
    return res;
}
