int dijkstra(vector<int>&arr,int start,int end)
{
    const int MOD = 100000;
    vector<int>distance(MOD,INF);
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>>pq;
    pq.push({0,start});//distance,node
    distance[start] = 0;

    while(!pq.empty())
    {
        pair<int,int>frnt = pq.top();
        int step = frnt.first;
        int node = frnt.second;
        pq.pop();

        if(node == end)
        {
            return step;
        }
        for(int i = 0 ; i < arr.size() ; i++)
        {
            int resNode = (node * arr[i]) % MOD;
            if(distance[resNode] > step + 1)//relaxation
            {
                distance[resNode] = step + 1;
                pq.push({step+1,resNode});
            }
        }
    }

    return -1;
}

int minimumMultiplications(vector<int>& arr, int start, int end)
{
    //fastIO();

    return dijkstra(arr,start,end);
}
