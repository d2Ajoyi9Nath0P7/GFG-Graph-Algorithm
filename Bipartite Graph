bool bipartite(vector<int>adj[],int node,int col,vector<int>&vis,vector<int>&color)
{
    vis[node] = 1;
    color[node] = col;

    for(auto child : adj[node])
    {
        if(!vis[child])
        {
            if(!bipartite(adj,child,col^1,vis,color))
            {
                return false;
            }
        }
        else
        {
            if(color[node] == color[child])
            {
                return false;
            }
        }
    }
    return true;
}

bool isBipartite(int V, vector<vector<int>> &edges)
{
    vector<int>adj[V];
    vector<int>vis(V,0);
    vector<int>color(V,0);

    for(auto it : edges)
    {
        int u = it[0];
        int v = it[1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    for(int i = 0 ; i < V ; i++)
    {
        if(!vis[i])
        {
            if(!bipartite(adj,i,1,vis,color))
            {
                return  false;
            }
        }
    }
    return true;
}
