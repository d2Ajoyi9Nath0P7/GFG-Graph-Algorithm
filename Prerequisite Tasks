bool dfs(int node,vector<int>&vis,vector<int>adj[],stack<int>&st,vector<int>&pathVis)
{
    vis[node] = 1;
    pathVis[node] = 1;

    for(auto child : adj[node])
    {
        if(!vis[child])
        {
            if(dfs(child,vis,adj,st,pathVis))
            {
                return true;
            }
        }
        else
        {
            if(pathVis[child] == 1)
            {
                return true;
            }
        }
    }
    pathVis[node] = 0;
    st.push(node);

    return false;
}

bool isPossible(int N, int P, vector<pair<int, int>>& prerequisites)
{
    vector<int>adj[N];

    for(pair<int,int> pr : prerequisites)
    {
        int u = pr.second;
        int v = pr.first;
        adj[u].push_back(v);
    }

    stack<int>st;
    vector<int>vis(N,0);
    vector<int>pathVis(N,0);

    for(int i = 0 ; i < N ; i++)
    {
        if(!vis[i])
        {
            if(dfs(i,vis,adj,st,pathVis))//cycle found
            {
                return false;
            }
        }
    }
    vector<int>res;
    while(!st.empty())
    {
        res.push_back(st.top());
        st.pop();
    }
    if(res.size() == N)
    {
        return true;
    }
    return false;
}
